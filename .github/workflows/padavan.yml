# This is a basic workflow that is manually triggered

name: Padavan固件编译

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      production:
        # Friendly description to be shown in the UI instead of 'name'
        description: 设置编译的固件型号,空格分隔.
        # Default value if no value is explicitly provided
        default: "PSG1218 PSG1208"
        # Input has to be provided for the workflow to run
        required: false
      release:
        # Friendly description to be shown in the UI instead of 'name'
        #无法换行
        #description: "是否需要发布到Release?\n(不发布也可以到Artifacts下载)"
        #缩短长度还是解决不了手机页面的显示超出
        #description: "是否需要发布到Release?"
        description: "是否需要发布到Release? (不发布也可以到Artifacts下载)"
        # Default value if no value is explicitly provided
        default: 'yes'
        # Input has to be provided for the workflow to run
        required: false
        
env:                      # 环境变量
  MHZ: 620               # CPU超频频率 必须为20的倍数，开启超频需开启158行超频开关 

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  padavan:
    # The type of runner that the job will run on ubuntu-latest
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    - name: Checkout
      uses: actions/checkout@master
      
    - name: 生成版本号
      run: |
        whoami
        id
        echo 接收到的输入参数:
        echo "${{ github.event.inputs.production }}"
        echo "${{ github.event.inputs.release }}"
        echo 
        echo 当前目录:$(pwd)
        # 版本号,用日期
        VERSION=$(TZ='Asia/Shanghai' date +%Y.%m.%d-%H%M)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        # $GITHUB_ENV变量必须要在下一个流程才生效
        echo "DIR=/opt/rt-n56u" >> $GITHUB_ENV
        val1="${{ github.event.inputs.production }}"
        val2=$(echo $val1 | sed 's/ /-/')
        echo "NAME=$VERSION+${val2}" >> $GITHUB_ENV
        #让版本号符合版本规范 1.0.202110252117+K2P-PSG1218
        # 2021.10.28-2133+K2P-PSG1218
        echo "TAG=v$VERSION+${val2}" >> $GITHUB_ENV
        ip addr
    - name: 创建目录
      run: |
        echo ${{ env.NAME }}
        echo ${{ env.TAG }}
        sudo mkdir -m 777 -p ${{ env.DIR }}
        sudo mkdir -m 777 -p /opt/images/
        
        echo 开始编译时间 >> /opt/images/readme.txt
        TZ='Asia/Shanghai'  date  '+%Y-%m-%d %H:%M:%S' >> /opt/images/readme.txt
        
    - name: 准备编译环境
      if: true
      run: | 
        sudo apt-get update
        sudo apt-get -y install unzip libtool-bin curl cmake gperf gawk flex bison nano xxd fakeroot \
        cpio git python-docutils gettext automake autopoint texinfo build-essential help2man \
        pkg-config zlib1g-dev libgmp3-dev libmpc-dev libmpfr-dev libncurses5-dev libltdl-dev wget
  
    - name: 下载源码
      run: |
        git clone --depth=1 https://github.com/vipshmily/rt-n56u.git ${{ env.DIR }}  > /dev/null
        cd ${{ env.DIR }}/toolchain-mipsel
        sh dl_toolchain.sh > /dev/null
        pwd
        
    - id: vars
      run: |
        echo ::set-output name=go_version::$(curl -s https://raw.githubusercontent.com/actions/go-versions/main/versions-manifest.json | grep -oE '"version": "[0-9]{1}.[0-9]{1,}(.[0-9]{1,})?"' | head -1 | cut -d':' -f2 | sed 's/ //g; s/"//g')
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: ${{ steps.vars.outputs.go_version }}
        
    - name: 开始编译
      if: true
      env: 
        #用空格分隔型号,循环编译
        TNAME: "${{ github.event.inputs.production }}"
      run: |
        if [ "$TNAME" == "DEBUG" ];then
          exit 0
        fi
        for m in $TNAME;
        do
        echo "::group::编译 ${m}"
        cwd=`pwd`
        CONFIG_TOOLCHAIN_DIR=${cwd//\//\\\/}\\/toolchain-mipsel
        cd ${{ env.DIR }}/trunk
        #cd /opt/rt-n56u/trunk
        echo "CPU超频到$MHZ"mhz
        echo "修改CPU频率"
        clock=`echo "obase=16 ; ibase=10 ; (((($MHZ/20)-1)*16+2))" | bc`
        echo "16进制$clock"
        sed -i "554,555s:0xff:0x7ff:g" ${{ env.DIR }}/trunk/linux-3.4.x/arch/mips/rt2880/init.c
        sed -i "554,556s:0xc2:0x$clock:g" ${{ env.DIR }}/trunk/linux-3.4.x/arch/mips/rt2880/init.c
        #for m in $TNAME;
        #do
        if [ ! -f configs/templates/$m.config ] ; then
        echo "configs/templates/$m.config not found "
        exit 1
        fi
        cp -f configs/templates/$m.config .config
        ############################################################################################
        #因不同型号配置功能不一样，所以先把配置项删除，如果你自己要添加其他的，也要写上删除这一条，切记！！！
        ############################################################################################
        sed -i '/CONFIG_FIRMWARE_INCLUDE_MENTOHUST/d' .config #删除配置项MENTOHUST
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_SERVER/d' .config #删除配置项SOFTETHERVPN
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CLIENT/d' .config #删除配置项SOFTETHERVPN
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SOFTETHERVPN_CMD/d' .config #删除配置项SOFTETHERVPN
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT/d' .config #删除配置项SCUTCLIENT
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS/d' .config #删除配置项SS plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SSSERVER/d' .config #删除配置项SS server
        sed -i '/CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER/d' .config #删除配置项DNSFORWARDER
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ADBYBY/d' .config #删除配置项adbyby plus+
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPC/d' .config #删除配置项FRPC
        sed -i '/CONFIG_FIRMWARE_INCLUDE_FRPS/d' .config #删除配置项FRPS
        sed -i '/CONFIG_FIRMWARE_INCLUDE_TUNSAFE/d' .config #删除配置项TUNSAFE
        sed -i '/CONFIG_FIRMWARE_INCLUDE_ALIDDNS/d' .config #删除配置项阿里DDNS
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SMARTDNS/d' .config #删除配置项SMARTDNS
        sed -i '/CONFIG_FIRMWARE_INCLUDE_SRELAY/d' .config #删除配置项SRELAY
        sed -i '/CONFIG_FIRMWARE_INCLUDE_NPC/d' .config #删除配置项NPC
        sed -i '/CONFIG_FIRMWARE_INCLUDE_KUMASOCKS/d' .config #删除配置项KUMASOCKS
        sed -i '/CONFIG_FIRMWARE_CPU_600MHZ/d' .config #删除配置项超频900MHz
        ######################################################################
        #以下选项是定义你需要的功能（y=集成,n=忽略），重新写入到.config文件
        ######################################################################
        echo "CONFIG_FIRMWARE_INCLUDE_MENTOHUST=n" >> .config #MENTOHUST
        echo "CONFIG_FIRMWARE_INCLUDE_SCUTCLIENT=n" >> .config #SCUTCLIENT
        echo "CONFIG_FIRMWARE_INCLUDE_SSSERVER=n" >> .config #SS server
        echo "CONFIG_FIRMWARE_INCLUDE_DNSFORWARDER=n" >> .config #DNSFORWARDER
        echo "CONFIG_FIRMWARE_INCLUDE_TUNSAFE=n" >> .config #TUNSAFE
        echo "CONFIG_FIRMWARE_INCLUDE_SRELAY=n" >> .config #可以不集成
        echo "CONFIG_FIRMWARE_CPU_600MHZ=y" >> .config #开启超频，仅MT7621可用

        ##科学上网## 特别注意，开启科学需要开启161行的shadowsocks，否则全部有关插件都不集成
        echo "CONFIG_FIRMWARE_INCLUDE_SHADOWSOCKS=y" >> .config #科学上网插件，选择n后全部有关插件都不集成
        echo "CONFIG_FIRMWARE_INCLUDE_SSOBFS=y" >> .config # simple-obfs混淆插件
        echo "CONFIG_FIRMWARE_INCLUDE_V2RAY=n" >> .config #集成v2ray执行文件（3.6M左右)，如果不集成，会从网上下载下来执行，不影响正常使用
        echo "CONFIG_FIRMWARE_INCLUDE_XRAY=n" >> .config #集成xray执行文件（3.6M左右)，如果不集成，会从网上下载下来执行，不影响正常使用
        echo "CONFIG_FIRMWARE_INCLUDE_TROJAN=n" >> .config #集成trojan执行文件(1.1M左右)，如果不集成，会从网上下载下来执行，不影响正常使用
        echo "CONFIG_FIRMWARE_INCLUDE_KUMASOCKS=y" >> .config #socks5服务端
        ##科学上网##
        
        ##广告管理##
        echo "CONFIG_FIRMWARE_INCLUDE_ADBYBY=n" >> .config #adbyby plus+
        echo "CONFIG_FIRMWARE_INCLUDE_KOOLPROXY=n" >> .config #KP广告过滤
        ##广告管理##
        
        ##DNS服务##
        echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNS=y" >> .config #smartdns
        echo "CONFIG_FIRMWARE_INCLUDE_SMARTDNSBIN=n" >> .config #smartdns二进制文件
        echo "CONFIG_FIRMWARE_INCLUDE_ADGUARDHOME=n" >> .config #adg DNS去AD
        ##DNS服务##
        
        ##文件管理##
        echo "CONFIG_FIRMWARE_INCLUDE_CADDY=n" >> .config #在线文件管理服务
        echo "CONFIG_FIRMWARE_INCLUDE_CADDYBIN=n" >> .config #集成caddu执行文件，此文件有13M,请注意固件大小。如果不集成，会从网上下载下来执行，不影响正常使用
        ##文件管理##
        
        ##音乐解锁##
        echo "CONFIG_FIRMWARE_INCLUDE_WYY=n" >> .config #网易云解锁
        echo "CONFIG_FIRMWARE_INCLUDE_WYYBIN=n" >> .config #网易云解锁GO版本执行文件（4M多）注意固件超大小,不集成会自动下载
        ##音乐解锁##
        
        ##内网穿透服务##
        echo "CONFIG_FIRMWARE_INCLUDE_ZEROTIER=n" >> .config #zerotier ~1.3M
        echo "CONFIG_FIRMWARE_INCLUDE_ALIDDNS=n" >> .config #阿里DDNS
        echo "CONFIG_FIRMWARE_INCLUDE_FRPC=n" >> .config #内网穿透FRPC
        echo "CONFIG_FIRMWARE_INCLUDE_FRPS=n" >> .config #内网穿透FRPS
        echo "CONFIG_FIRMWARE_INCLUDE_NPC=n" >> .config #npc
        ##内网穿透服务##
        
          # 更新v2ray版本
          v2_version=`curl --silent "https://api.github.com/repos/v2fly/v2ray-core/releases/latest" | jq -r '.tag_name | sub("^v";"")'`
          sed -i "s/V2ray_VERSION := .*/V2ray_VERSION := $v2_version/g" ${{ env.DIR }}/trunk/user/v2ray/Makefile
          sed -i 's|codeload.github.com/v2ray|codeload.github.com/v2fly|g' ${{ env.DIR }}/trunk/user/v2ray/Makefile
          # 更新xray版本
          xray_version=`curl --silent "https://api.github.com/repos/XTLS/Xray-core/releases/latest" | jq -r '.tag_name | sub("^v";"")'`
          sed -i "s/Xray_VERSION := .*/Xray_VERSION := $xray_version/g" ${{ env.DIR }}/trunk/user/xray/Makefile
          sed -i 's|codeload.github.com/xray|codeload.github.com/XTLS|g' ${{ env.DIR }}/trunk/user/xray/Makefile
        #########################################################################################
        # 自定义添加其它功能请参考源码configs/templates/目录下的config文件。按照上面的格式添加即可
        # 格式如下：
        # sed -i '/自定义项/d' .config
        # echo "自定义项=y" >> .config
        #########################################################################################
        sed -i "s/^CONFIG_TOOLCHAIN_DIR=.*$/CONFIG_TOOLCHAIN_DIR=${CONFIG_TOOLCHAIN_DIR}/g" .config
        sudo ./clear_tree || echo
        sudo ./clear_tree_simple
        sudo ./build_firmware_modify $m 0    > /dev/null
        #sudo ./build_firmware_modify ${m}    > /dev/null
        ls -l images
        sudo mv -f images/*.trx /opt/images/
        echo "::endgroup::"
        done
      
    - name: 收集信息
      if: true
      run: |
        cd /opt/images
        #记录一个版本号
        echo 完成编译时间 >> /opt/images/readme.txt
        TZ='Asia/Shanghai'  date  '+%Y-%m-%d %H:%M:%S' >> /opt/images/readme.txt
        
        echo  >> /opt/images/readme.txt
        echo 编译版本 >> /opt/images/readme.txt
        
        pushd ${{ env.DIR }}
        git ls-remote --get-url origin >> /opt/images/readme.txt
        git log -1 >> /opt/images/readme.txt
        popd
        
        echo  >> /opt/images/readme.txt
        echo md5校验值 >> /opt/images/readme.txt
        cd /opt/images
        #为固件文件名加上日期
        for i in *.trx
        do
          #echo org $i
          mv -v "$i" "${i%.*}-${{ env.VERSION }}.trx"
        done
        #测试
        md5sum *.trx >> /opt/images/readme.txt || echo
        ls -l      
        
    - name : 上传编译的固件Artifacts
      uses: actions/upload-artifact@v2
      if: true
      with:
        name: ${{ env.NAME }}
        path: /opt/images
        
    - name: 发布到Release
      if: ${{ github.event.inputs.release == 'yes' }}
      uses: softprops/action-gh-release@v1
      with:
        name: zjdycj+cp-${{ env.NAME }}
        tag_name: ${{ env.TAG }}
        body_path: /opt/images/readme.txt
        draft: false
        prerelease: false
        files: /opt/images/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
